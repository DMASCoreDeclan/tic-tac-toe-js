/* While all of the code used in this file has been typed by the author, it is heavily influenced by a hybrid of designs from the following developers: 
Kyle from Web Dev Simplified using https://www.youtube.com/watch?v=Y-GkMjUZsmM&t=939s - index.html.old and script.js.old
Ania KubÃ³w from https://youtu.be/DRaWr0Dcbl0 - index.html.old and script.js.old
Bro Code from https://youtu.be/AnmwHjpEhtA 
Coding with Adam from https://www.youtube.com/watch?v=fPew9OI2PnA&t=1906s
Adam Khoury from https://www.youtube.com/watch?v=hsSXzdn_0Gg - how to toggleMute in JS
While some code just has to be the same, all Variable names, CSS names and Function names have been changed.  The design is fundamentally the same as Coding with Adam, with additional feature such as the Mute/Unmute Audio button.  The .wav sounds are downloaded from CodinWithAdma channel, but were renamed before upload and are called by different names in JS.
The Favicon comes from https://icon-icons.com/icon/tic-tac-toe/39453 but was resized, renamed and recolored before being uploaded. */

// Determines which css slass is assigned to .board and .cell when a cell is clicked
const crossClass = 'cross';
const circleClass = 'circle';
const winningPossibilities = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
];

const winningStikethrough = [
    //identify winning combinations and stikeClass
    ["strike-row-1"],
    ["strike-row-1"],
    ["strike-row-3"],
    ["strike-col-1"],
    ["strike-col-2"],
    ["strike-col-3"],
    ["strike-diagonal-1"],
    ["strike-diagonal-2"]
];
let winningStikethroughIndex;

// Select cells from index.html with attribute data-cell
const cellElements = document.querySelectorAll('[data-cell]');
const board = document.getElementById('board');
const winningMessageTextElement = document.querySelector('[data-winning-message]');
const winningMessageElement = document.getElementById('winningMessage');
const restartButton = document.getElementById('restartButton');

//Get sounds for Clicks and GameOver
const gameOverSound = new Audio('assets/sounds/game_over.wav');
const clickSound = new Audio('assets/sounds/click.wav');


// Start the Game.  Initialise playersTurn to cross.  Add Event Listener to each cell in the board but only allow it to be clicked once.
gameStart();

function gameStart() {
    winningMessageElement.classList.remove('show');
    playersTurn = true;
    cellElements.forEach(_cell => {
        _cell.classList.remove(circleClass);
        _cell.classList.remove(crossClass);
        _cell.removeEventListener('click', handleClick);
        _cell.addEventListener('click', handleClick, { once: true });
    });

    //     console.log(playersTurn);
    setBoardHoverClass();

}

// this function Places a the Mark we defined in CSS, Checks to see if the has resulted in a Win or a Draw, if not, swap turns so that a new Mark can be placed.  Once this function completes either through a Win or a Draw, calls a restart  function to allow the users to play again.
function handleClick(e) {
    const clickedCell = e.target;
    // playersTurn determins whether a cross or a circle is to be placed in the cell
    const currentClass = playersTurn ? circleClass : crossClass;
    //Place Mark
    placeMark(clickedCell, currentClass);
    //Check for Win
    if (checkWin(currentClass)) {
        endGame(false);
        //Check for Draw
    } else if (CheckDraw()) {
        endGame(true);
    } else {
        //SwitchTurn between cross and circle
        switchTurns();
        //Set .board to show hover effect of whose turn it is next
        setBoardHoverClass();
    }

};

// identifies the clickedCell and adds the cross or circle class to the div, then play a sound
function placeMark(clickedCell, currentClass) {
    clickedCell.classList.add(currentClass);

    clickSound.volume = .1;
    clickSound.play();
};

// if the last mark placed is in the winningCombinations array
function checkWin(currentClass) {
    return winningPossibilities.some(currentMarksOnBoard => {
        return currentMarksOnBoard.every(index => {
            return cellElements[index].classList.contains(currentClass);
        });
    });
};






//checks to see if every cell in .cell has a class of .circle OR .cross then this.  
//I used destructuring here as cellElements is a variable and not an Array.  .every only works with Arrays.  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
function CheckDraw() {
    return [...cellElements].every(cell => {
        return cell.classList.contains(circleClass) || cell.classList.contains(crossClass);
    });

};

function endGame(draw) {
    if (draw) {
        winningMessageTextElement.innerText = `Draw!`;
    } else {
        winningMessageTextElement.innerText = `${playersTurn ? "O" : "X"} Wins!`;
    }
    winningMessageElement.classList.add('show');
}


// identifies the turn from the playersTurn and switches it from cross to circle or circle to cross 
function switchTurns() {
    playersTurn = !playersTurn;
};

// identifies which hover class to apply to the board to indicate which playerTurn it is next
function setBoardHoverClass() {
    board.classList.remove(crossClass);
    board.classList.remove(circleClass);
    playersTurn ? board.classList.add(circleClass) : board.classList.add(crossClass);
};

restartButton.addEventListener('click', gameStart);

